list(목록) 자료형

 index       0      1      2
 변수 = [원소1, 원소2, 원소3, ...]
        [item1, item2, item3, ...]

 목록의 indexing(인덱싱)은 목록안에 있는 특정한 원소 1개를 조회하는 기법
 사용법 - 변수[index]	->	원소
          변수[0]	->	원소1, item1
          변수[2]	->	원소3, item3

 목록의 slicing(슬라이싱)은 목록안에 있는 연속적인 원소들을 조회하는 기법
 사용법 - 변수[start:end]	-> start 이상부터 end 미만 사이의 원소들을 조회
				   start 생략시 0 index이상부터
				   end   생략시 마지막 index까지

          index          0        1     2    3   4   5   6   7
          student = ['hong', '홍길동', 'A', 80, 90, 88, 85, 90]

          student[0]	-> 'hong'
          student[2]	-> 'A'
          student[3:]	-> [80, 90, 88, 85, 90]
          student[:]	-> ['hong', '홍길동', 'A', 80, 90, 88, 85, 90]



dict(사전) 자료형

  변수 = { 키1:값1   ,  키2:값2   ,  키3:값3   , ...}
         {key1:value1, key2:value2, key3:value3, ...}
          <- item1 ->  <- item2 ->  <- item3 ->

  조회방법: 변수[키]	->	값
            변수[키1]	->	값1
            변수[key2]	->	value2

  keys()	->	사전데이터에서 키들을 목록화
			  [key1   , key2   , key3   , ...]
  values()	->	사전데이터에서 값들을 목록화
			  [values1, values2, values3, ...]
  items()	->	사전데이터에서 튜플(키, 값)로 목록화
			  [(key1, value1), (key2, value2), (key3, value3), ...]
-------------------------------------------------------------------------------------
연산자
  1. 산술연산자: +, -, *, /, **, //, %
			-> 결과: 1개의 수
  2. 관계(비교)연산자: ==, !=, >, >=, <, <=
			-> 결과: 진리값(bool)
  3. 논리연산자: not, and, or
			-> 결과: 진리값(bool)

연산자들의 우선순위

  1. 괄      호: (  )
  2. 산술연산자: * , /
  3. 산술연산자: + , -
  4. 관계연산자: ==, !=, >, >=, <, <=
  5. 논리연산자: not
  6. 논리연산자: and
  7. 논리연산자: or

  3 + 1 * 2 > 7 and (4 + 2) / 3 < 4 or not False and 3 != 2
                     --1--6
      --2--2         -----2----2
  ----3----5
  ------4------F    -------4-------T                 ---4--T
                                       ----5----T
  ---------------6-----------------F   ----------6---------T
 -------------------------------7--------------------------T

변수(Variable)를 만드는 방법
 1. 0 ~ 9, A ~ Z, a ~ z, _ 만으로 구성할 수 있다.
 2. 0 ~ 9 로 시작할 수 없다.
 3. 시스템 예약어는 사용할 수 없다.
    - if, for, while, in, pass, True/False, ...
 4. Python 3 버전부터는 Unicode 지원으로 한글도 변수명에 사용될 수 있다. (추천X)

변수로 만들 수 있지만, 추천하지 변수명
 1. 너무 짧은 변수명: s, p, a, x, ...
 2. 아무 의미없이 조합된 변수명: dfv, adf, ierf, ...
 3. 모듈명 또는 내장 함수들: sum, max, min, ...

생성할 수 없는 변수
 1. my average	: 띄어쓰기는 변수명에 포함될 수 없다.
 2. 12kor	: 숫자(0~9)로 시작할 수 없다.
 3. rate%	: '_' 제외한 특수문자를 사용할 수 없다.
 4. for		: 시스템 예약어는 사용할 수 없다.

추천하는 변수명: 너무 짧지 않고, 변수명만으로도 저장된 데이터를 유추할 수 있는 변수명
 name, city, scores, address, index, ...

변수명의 형태
 my_average : snake_case  - 일반적인 변수명이나 함수명에 주로 사용된다.
 MyAverage  : CamelCase   - 클래스명에 사용된다.